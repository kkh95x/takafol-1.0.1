






import 'dart:async';

import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:takafol/constant.dart';
import 'package:takafol/src/core/application/auth/auh_notifer.dart';
import 'package:takafol/src/donations_mangement/application/donation_providers.dart';

import 'package:takafol/src/donations_mangement/data/supa_donation_repostory.dart';
import 'package:takafol/src/donations_mangement/domain/donation.dart';



final streamDontaion=StreamProvider.family<Donation?,String>((ref,id) {
final stream=StreamController<Donation>();
 Supabase.instance.client.from(Tabels.donation)
.stream(primaryKey: ['id'])
.eq("id", id).listen((event) {
   stream.sink.add(Donation.fromJson(event.first));
});
return stream.stream;
} );

final isMessagesPageDonation=StateProvider<bool>((ref) => false);


final streamMyDonations =StateNotifierProvider<SteamDontaionNotifiner,AsyncValue<List<Donation>>>((ref) {
//   final user=ref.read(authNotiferProvider).currentUser;
//   final repostory=ref.read(donationRepositoryProvider);
//    final stream=StreamController<List<Donation>?>();
//     Supabase.instance.client.realtime.channel('public:${Tabels.donation}').on(RealtimeListenTypes.postgresChanges,
//     ChannelFilter(event: '*', schema: 'public', table: Tabels.donation,),
//     (payload, [ref]) async{
      
      
//      repostory.getAllDonationByBenefactorId(user?.id??"").then((value) {
//      stream.sink.add(value);

//      });

// }).subscribe();

//  ref.read(donationRepositoryProvider).getAllDonationByBenefactorId(user?.id??"").then((value) {
//  stream.sink.add(value);
//  });
    
//    return stream.stream;
return SteamDontaionNotifiner(ref)..init();

});




class SteamDontaionNotifiner extends StateNotifier<AsyncValue<List<Donation>>>{
  SteamDontaionNotifiner(this.ref):super(const AsyncLoading());
Ref ref;

  void init(){
    state=const AsyncLoading();
    final user=ref.read(authNotiferProvider).currentUser;
  final repostory=ref.read(donationRepositoryProvider);
    Supabase.instance.client.realtime.channel('public:${Tabels.donation}').on(RealtimeListenTypes.postgresChanges,
    ChannelFilter(event: '*', schema: 'public', table: Tabels.donation,),
    (payload, [ref]) async{
      
      
     repostory.getAllDonationByBenefactorId(user?.id??"").then((value) {
      state=AsyncData(value);

     });

}).subscribe();

 ref.read(donationRepositoryProvider).getAllDonationByBenefactorId(user?.id??"").then((value) {
      state=AsyncData(value);
 });
    
  }
  
}












// final donationsStreamNotificationProvider =
//     AsyncNotifierProvider.autoDispose<DonationDetailsRealTime, Donation?>(() {
      
//   return DonationDetailsRealTime(Supabase.instance.client);
// });
// class DonationDetailsRealTime extends AutoDisposeAsyncNotifier<Donation?>{
// DonationDetailsRealTime(this._supabaseClient){
// }
//   final SupabaseClient _supabaseClient;
//   @override
//   FutureOr<Donation?> build()async {

//     final   donationId=ref.read(currentDoationForDetails);


// _supabaseClient.from(Tabels.donation).stream(primaryKey: ["id"])
// .eq("id", donationId)

// .listen((event) {
//         state=AsyncData(Donation.fromJson(event.first));

// });
// final donationStream=StreamProviderFamily<Donation,String>((ref, id) => )
// // _supabaseClient.channel('public:${Tabels.donation}').on(RealtimeListenTypes.postgresChanges,
// //     ChannelFilter(event: 'UPDATE', schema: 'public', table: Tabels.donation,filter: "id=eq.$donationId"),
// //     (payload, [ref]) async{


// //        print("------> ChannelFilter $payload donation  $ref");
// //        final data=await ref.read(donationRepositoryProvider).getDonationById(donationId);
// //       state=AsyncData(Donation.fromJson(data));
 
// // }).subscribe();

      

// return await ref.read(donationRepositoryProvider).getDonationById(donationId);

//   }

// }

















// import 'package:flutter_riverpod/flutter_riverpod.dart';
// import 'package:freezed_annotation/freezed_annotation.dart';
// import 'package:flutter/foundation.dart';
// import 'package:supabase_flutter/supabase_flutter.dart';
// import 'package:takafol/constant.dart';
// import 'package:takafol/src/core/application/auth/auh_notifer.dart';
// import 'package:takafol/src/donations_mangement/data/supa_donation_repostory.dart';
// import 'package:takafol/src/donations_mangement/domain/donation.dart';
// import 'package:takafol/src/donations_mangement/domain/donation_enum.dart';
// import 'package:takafol/src/user_management/domain/app_user_type.dart';
// import 'package:takafol/src/user_management/domain/user_info.dart';

// // required: associates our `main.dart` with the code generated by Freezed
// part 'donation_reall_time_provider.freezed.dart';
// // optional: Since our Person class is serializable, we must add this line.
// // But if Person was not serializable, we could skip it.

// @freezed
// class DonationRealTimeStatus with _$DonationRealTimeStatus {
//   const factory DonationRealTimeStatus.data(Donation? recipes) = _Data;
//   const factory DonationRealTimeStatus.loading() = _Loading;
//   const factory DonationRealTimeStatus.error(Object? e, [StackTrace? stk]) =
//       _Error;
//   const factory DonationRealTimeStatus.onGoingLoading(Donation? recipes) =
//       _OnGoingLoading;
//   const factory DonationRealTimeStatus.onGoingError(
//       Donation? recipes, Object? e,
//       [StackTrace? stk]) = _OngoingError;
// }

// final donationRealTimeProvider = StateNotifierProvider.family<
//         DonationRealTimeNotifer, DonationRealTimeStatus, String>(
//     (ref, donId) =>
//         DonationRealTimeNotifer(donId, ref, Supabase.instance.client)..init());

// class DonationRealTimeNotifer extends StateNotifier<DonationRealTimeStatus> {
//   DonationRealTimeNotifer(this.donationId, this.ref, this.supa)
//       : super(const DonationRealTimeStatus.loading());
//   String donationId;
//   Ref ref;
//   SupabaseClient supa;
//   Future<void> init() async {
//     Donation? donation =
//         await ref.read(donationRepositoryProvider).getDonationById(donationId);
//     state = DonationRealTimeStatus.data(donation);
//     // final chanel = supa.realtime.channel(donationId);

//     final user = ref.read(authNotiferProvider).currentUser;
//     if (user?.accountType == AccountType.benfactor) {
//       supa
//           .from(Tabels.donation)
//           .stream(primaryKey: ['id'])
//           .eq("benfactor->>id",
//              user?.id ?? "-")
//           .listen((List<Map<String, dynamic>> data) async {
//             print("====> recived data $data");
//             // Do something awesome with the data
//             state = DonationRealTimeStatus.onGoingLoading(donation);
//             final newData = await ref
//                 .read(donationRepositoryProvider)
//                 .getDonationById(donationId);
//             state = DonationRealTimeStatus.data(newData);
//             donation = newData;
//           });
//     } else {
//       supa
//           .from(Tabels.donation)
//           .stream(primaryKey: ['id'])
//           .eq("needy->>id", user?.id ?? "-")
//           .listen((List<Map<String, dynamic>> data) async {
//             print("====> recived data $data");
//             // Do something awesome with the data
//             state = DonationRealTimeStatus.onGoingLoading(donation);
//             final newData = await ref
//                 .read(donationRepositoryProvider)
//                 .getDonationById(donationId);
//             state = DonationRealTimeStatus.data(newData);
//           });
//     }
//     // chanel.on(
//     //     RealtimeListenTypes.postgresChanges,
//     //     ChannelFilter(
//     //         event: "*",
//     //         filter: "id:eq.$donationId",
//     //         schema: "public",
//     //         table: Tabels.donation), (payload, [ref]) async {
//     //   state = DonationRealTimeStatus.onGoingLoading(donation);
//     //   final newData = await ref
//     //       .read(donationRepositoryProvider)
//     //       .getDonationById(donationId);
//     //   state = DonationRealTimeStatus.data(newData);
//     //   donation = newData;
//     // }).subscribe();
//   }
// }
